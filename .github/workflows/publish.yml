name: Publish to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'  # Use 3.11 for building, package supports 3.10+

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Clean previous builds
      run: |
        echo "Cleaning any previous build artifacts..."
        rm -rf dist/ build/ *.egg-info/
        echo "✅ Build directory cleaned"

    - name: Build package
      run: python -m build

    - name: Verify build artifacts
      run: |
        echo "Build artifacts:"
        ls -la dist/
        echo "Checking for any platform-specific files..."
        find dist/ -name "*darwin*" -o -name "*linux*" -o -name "*windows*" -o -name "*arm64*" -o -name "*x86_64*" || echo "No platform-specific files found"

    - name: Verify package metadata
      run: |
        echo "Verifying package supports Python 3.10+"
        python -c "
        import tomllib
        with open('pyproject.toml', 'rb') as f:
            data = tomllib.load(f)
        requires_python = data['project']['requires-python']
        print(f'Package requires Python: {requires_python}')
        assert '>=3.10' in requires_python, f'Package should support Python 3.10+, got: {requires_python}'
        print('✅ Package supports Python 3.10+')
        "

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        # Check if this is a release or manual dispatch
        if [ "${{ github.event_name }}" = "release" ]; then
          echo "Publishing from release: ${{ github.event.release.tag_name }}"
        else
          echo "Publishing from manual dispatch: ${{ inputs.version }}"
        fi
        
        # Upload to PyPI using API token
        python -m twine upload dist/* --verbose

    - name: Verify publication
      run: |
        echo "Package published successfully to PyPI!"
        echo "You can view it at: https://pypi.org/project/python-gitignore/"
