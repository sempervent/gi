name: Build Cross-Platform Executables

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            arch: x86_64
            python-version: "3.11"
          - os: windows-latest
            platform: windows
            arch: x86_64
            python-version: "3.11"
          - os: macos-latest
            platform: macos
            arch: x86_64
            python-version: "3.11"
          - os: macos-latest
            platform: macos
            arch: arm64
            python-version: "3.11"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[build]"

    - name: Build executable
      run: |
        python scripts/build.py

    - name: Get version from tag
      id: get_version
      shell: bash
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION=${VERSION#v}
        else
          VERSION="dev-$(date +%Y%m%d-%H%M%S)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"

    - name: Create release archive
      shell: bash
      run: |
        PLATFORM="${{ matrix.platform }}"
        ARCH="${{ matrix.arch }}"
        VERSION="${{ steps.get_version.outputs.version }}"
        
        # Find the executable
        if [ "$PLATFORM" = "windows" ]; then
          EXECUTABLE="gi.exe"
          ARCHIVE_NAME="gi-${VERSION}-${PLATFORM}-${ARCH}.zip"
          cd dist/*/
          # Use PowerShell's Compress-Archive for Windows
          powershell -Command "Compress-Archive -Path '$EXECUTABLE' -DestinationPath '../../$ARCHIVE_NAME' -Force"
          cd ../../
        else
          EXECUTABLE="gi"
          ARCHIVE_NAME="gi-${VERSION}-${PLATFORM}-${ARCH}.tar.gz"
          cd dist/*/
          tar -czf "../../${ARCHIVE_NAME}" "$EXECUTABLE"
          cd ../../
        fi
        
        echo "Created: $ARCHIVE_NAME"
        ls -la "$ARCHIVE_NAME"
        
        # Debug: List all files in current directory
        echo "Files in current directory:"
        ls -la
        echo "Files matching gi-* pattern:"
        ls -la gi-* || echo "No files matching gi-* pattern found"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gi-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          gi-*.tar.gz
          gi-*.zip
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Get version from tag
      id: get_version
      shell: bash
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        VERSION=${VERSION#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Release version: $VERSION"

    - name: Prepare release files
      shell: bash
      run: |
        VERSION="${{ steps.get_version.outputs.version }}"
        mkdir -p release
        
        # Copy all artifacts to release directory
        find artifacts/ -name "gi-*.tar.gz" -o -name "gi-*.zip" | while read file; do
          cp "$file" release/
        done
        
        # Debug: List what we found
        echo "Artifacts directory contents:"
        ls -la artifacts/
        echo "Found files:"
        find artifacts/ -name "gi-*" -type f
        
        # Create a checksums file
        cd release
        sha256sum gi-*.tar.gz gi-*.zip > gi-${VERSION}-checksums.txt
        cd ..
        
        echo "Release files:"
        ls -la release/

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: |
          release/gi-*.tar.gz
          release/gi-*.zip
          release/gi-*-checksums.txt
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
